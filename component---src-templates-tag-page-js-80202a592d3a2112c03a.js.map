{"version":3,"sources":["webpack:///./src/templates/tag-page.js","webpack:///./src/components/tag.js","webpack:///./src/components/postCard.js"],"names":["TagPageTemplate","render","props","this","tag","pageContext","posts","data","allMarkdownRemark","edges","siteTitle","site","siteMetadata","title","location","charAt","toUpperCase","slice","keywords","className","totalCount","map","node","key","fields","slug","postClass","React","Component","pageQuery","Tags","tags","to","_","kebabCase","frontmatter","important","style","thumbnail","backgroundImage","childImageSharp","fluid","src","ContentNoImage","date","description","excerpt"],"mappings":"8LAOMA,E,gLACJC,OAAA,WACE,IAAMC,EAAQC,KAAKD,MACbE,EAAMD,KAAKD,MAAMG,YAAYD,IAC7BE,EAAQH,KAAKD,MAAMK,KAAKC,kBAAkBC,MAC1CC,EAAYP,KAAKD,MAAMK,KAAKI,KAAKC,aAAaC,MAEpD,OACE,kBAAC,IAAD,CAAQC,SAAUX,KAAKD,MAAMY,SAAUD,MAAOH,GAC5C,kBAAC,IAAD,CAEEG,MAAK,KAAMT,EAAIW,OAAO,GAAGC,cAAgBZ,EAAIa,MAAM,IACnDC,SAAU,CAAC,GAAGd,EAAJ,wCAEZ,4BAAQe,UAAU,iBAChB,wBAAIA,UAAU,mBAAd,IAAkCf,EAAlC,IAAwCF,EAAMK,KAAKC,kBAAkBY,WAArE,MAEJ,yBAAKD,UAAU,aACZb,EAAMe,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACZ,OACE,kBAAC,IAAD,CACEC,IAAKD,EAAKE,OAAOC,KACjBH,KAAMA,EACNI,UAAS,e,GAvBOC,IAAMC,WAiCrB5B,YAER,IAAM6B,EAAS,c,mFCtChBC,E,gLACJ7B,OAAA,WAAU,IACA8B,EAAS5B,KAAKD,MAAd6B,KACR,OACE,yBAAKZ,UAAU,kBACZY,GACCA,EAAKV,KAAI,SAAAjB,GAAG,OACV,0BAAMmB,IAAKnB,GACX,kBAAC,OAAD,CAAMe,UAAU,qBAChBI,IAAKnB,EAEL4B,GAAE,SAAWC,IAAEC,UAAU9B,IAHzB,IAKEA,GAED,U,GAfMwB,aAsBJE,O,sECtBA,aAAA5B,GAAK,OAClB,6BACEiB,UAAS,cAAejB,EAAMoB,KAAKa,YAAYC,YACR,IAArClC,EAAMoB,KAAKa,YAAYC,WADD,mBAAf,IAEclC,EAAMwB,UAFpB,YAGTW,MACEnC,EAAMoB,KAAKa,YAAYG,WAAa,CAClCC,gBAAgB,OAAQrC,EAAMoB,KAAKa,YAAYG,UAAUE,gBAAgBC,MAAMC,IAAhE,MAInB,kBAACC,EAAD,CAAgBzC,MAAOA,M,IAIrByC,E,gLACJ1C,OAAA,WAAU,IACAC,EAAUC,KAAKD,MAAfA,MACR,OACE,yBAAKiB,UAAU,qBACb,6BACE,kBAAC,IAAD,CAAMY,KAAM7B,EAAMoB,KAAKa,YAAYJ,QAErC,6BACE,kBAAC,OAAD,CAAMC,GAAI9B,EAAMoB,KAAKE,OAAOC,KAAMN,UAAU,kBAC1C,wBAAIA,UAAU,mBACXjB,EAAMoB,KAAKa,YAAYtB,OAASX,EAAMoB,KAAKE,OAAOC,QAIzD,yBAAKN,UAAU,kBAAkBjB,EAAMoB,KAAKa,YAAYS,MACxD,yBAAKzB,UAAU,kBACZjB,EAAMoB,KAAKa,YAAYU,aAAe3C,EAAMoB,KAAKwB,SAEpD,6BACE,kBAAC,OAAD,CACEd,GAAI9B,EAAMoB,KAAKE,OAAOC,KACtBN,UAAU,qCAETjB,EAAMoB,KAAKa,YAAYU,aAAe3C,EAAMoB,KAAKwB,QAC9C,YACA,S,GA1BalB","file":"component---src-templates-tag-page-js-80202a592d3a2112c03a.js","sourcesContent":["import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport PostCard from \"../components/postCard\"\n\nclass TagPageTemplate extends React.Component {\n  render() {\n    const props = this.props\n    const tag = this.props.pageContext.tag\n    const posts = this.props.data.allMarkdownRemark.edges\n    const siteTitle = this.props.data.site.siteMetadata.title\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO\n          // title={`#${tag}`}\n          title={`#${tag.charAt(0).toUpperCase() + tag.slice(1)}`}\n          keywords={[`${tag}`, `blog`, `gatsby`, `javascript`, `react`]}\n        />\n        <header className=\"tag-page-head\">\n          <h1 className=\"page-head-title\">#{tag}({props.data.allMarkdownRemark.totalCount})</h1>\n        </header>\n      <div className=\"post-feed\">\n        {posts.map(({ node }) => {\n          return (\n            <PostCard\n              key={node.fields.slug}\n              node={node}\n              postClass={`post`}\n            />\n          )\n        })}\n      </div>\n    </Layout>\n    )\n  }\n}\n\nexport default TagPageTemplate\n\nexport const pageQuery = graphql`\n  query PostByTag($tag: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    allMarkdownRemark(filter: { frontmatter: { tags: { in: [$tag] } } }, sort: { fields: [frontmatter___date], order: DESC }) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            tags\n            thumbnail {\n              childImageSharp {\n                fluid(maxWidth: 1360) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","import React, { Component } from \"react\";\nimport _ from \"lodash\";\nimport { Link } from \"gatsby\";\n\nclass Tags extends Component {\n  render() {\n    const { tags } = this.props;\n    return (\n      <div className=\"post-card-tags\">\n        {tags &&\n          tags.map(tag => (\n            <span key={tag}>\n            <Link className=\"post-card-tag-link\"\n            key={tag}\n            // style={{ textDecoration: \"none\" }}\n            to={`/tags/${_.kebabCase(tag)}`}\n            >\n            #{tag}\n            </Link>\n            {\" \"}</span>\n          ))}\n      </div>\n    );\n  }\n}\n\nexport default Tags;","import React, { Component } from \"react\"\nimport { Link } from \"gatsby\"\nimport Tags from \"./tag\"\n\nexport default props => (\n  <article\n    className={`post-card ${props.node.frontmatter.important &&\n      props.node.frontmatter.important === true &&\n      `post-card-large`} ${props.postClass} no-image`}\n    style={\n      props.node.frontmatter.thumbnail && {\n        backgroundImage: `url(${props.node.frontmatter.thumbnail.childImageSharp.fluid.src})`,\n      }\n    }\n  >\n    <ContentNoImage props={props} />\n  </article>\n)\n\nclass ContentNoImage extends Component {\n  render() {\n    const { props } = this.props\n    return (\n      <div className=\"post-card-content\">\n        <div>\n          <Tags tags={props.node.frontmatter.tags} />\n        </div>\n        <div>\n          <Link to={props.node.fields.slug} className=\"post-card-link\">\n            <h2 className=\"post-card-title\">\n              {props.node.frontmatter.title || props.node.fields.slug}\n            </h2>\n          </Link>\n        </div>\n        <div className=\"post-card-date\">{props.node.frontmatter.date}</div>\n        <div className=\"post-card-body\">\n          {props.node.frontmatter.description || props.node.excerpt}\n        </div>\n        <div>\n          <Link\n            to={props.node.fields.slug}\n            className=\"post-card-link post-card-readmore\"\n          >\n            {props.node.frontmatter.description || props.node.excerpt\n              ? \"Read more\"\n              : null}\n          </Link>\n        </div>\n      </div>\n    )\n  }\n}\n"],"sourceRoot":""}