{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./src/components/tag.js","webpack:///./src/components/postCard.js"],"names":["BlogIndex","location","data","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","postCounter","keywords","description","className","map","node","key","fields","slug","count","postClass","props","query","render","Tags","tags","this","tag","to","_","kebabCase","Component","frontmatter","important","style","thumbnail","backgroundImage","childImageSharp","fluid","src","ContentNoImage","date","excerpt"],"mappings":"uKAYMA,G,cAAY,SAAC,EAAUC,GAAc,IAAtBC,EAAqB,EAArBA,KACbC,EAAYD,EAAKE,KAAKC,aAAaC,MACnCC,EAAQL,EAAKM,kBAAkBC,MACjCC,EAAc,EAElB,OACE,kBAAC,IAAD,CAAQJ,MAAOH,GACb,kBAAC,IAAD,CACEG,MAAM,QACNK,SAAU,CAAC,SAAD,wCAGXT,EAAKE,KAAKC,aAAaO,aACtB,4BAAQC,UAAU,aAChB,wBAAIA,UAAU,mBACXX,EAAKE,KAAKC,aAAaO,cAI9B,yBAAKC,UAAU,aACZN,EAAMO,KAAI,YAAe,IAAZC,EAAW,EAAXA,KAEZ,OADAL,IAEE,kBAAC,IAAD,CACEM,IAAKD,EAAKE,OAAOC,KACjBC,MAAOT,EACPK,KAAMA,EACNK,UAAS,gBA4CR,mBAAAC,GAAK,OAClB,kBAAC,cAAD,CACEC,MArCY,aAsCZC,OAAQ,SAAArB,GAAI,OACV,kBAACF,EAAD,eAAWC,SAAUoB,EAAMpB,SAAUoB,OAAK,EAACnB,KAAMA,GAAUmB,KAH/D,W,mFChFIG,E,gLACJD,OAAA,WAAU,IACAE,EAASC,KAAKL,MAAdI,KACR,OACE,yBAAKZ,UAAU,kBACZY,GACCA,EAAKX,KAAI,SAAAa,GAAG,OACV,0BAAMX,IAAKW,GACX,kBAAC,OAAD,CAAMd,UAAU,qBAChBG,IAAKW,EAELC,GAAE,SAAWC,IAAEC,UAAUH,IAHzB,IAKEA,GAED,U,GAfMI,aAsBJP,O,sECtBA,aAAAH,GAAK,OAClB,6BACER,UAAS,cAAeQ,EAAMN,KAAKiB,YAAYC,YACR,IAArCZ,EAAMN,KAAKiB,YAAYC,WADD,mBAAf,IAEcZ,EAAMD,UAFpB,YAGTc,MACEb,EAAMN,KAAKiB,YAAYG,WAAa,CAClCC,gBAAgB,OAAQf,EAAMN,KAAKiB,YAAYG,UAAUE,gBAAgBC,MAAMC,IAAhE,MAInB,kBAACC,EAAD,CAAgBnB,MAAOA,M,IAIrBmB,E,gLACJjB,OAAA,WAAU,IACAF,EAAUK,KAAKL,MAAfA,MACR,OACE,yBAAKR,UAAU,qBACb,6BACE,kBAAC,IAAD,CAAMY,KAAMJ,EAAMN,KAAKiB,YAAYP,QAErC,6BACE,kBAAC,OAAD,CAAMG,GAAIP,EAAMN,KAAKE,OAAOC,KAAML,UAAU,kBAC1C,wBAAIA,UAAU,mBACXQ,EAAMN,KAAKiB,YAAY1B,OAASe,EAAMN,KAAKE,OAAOC,QAIzD,yBAAKL,UAAU,kBAAkBQ,EAAMN,KAAKiB,YAAYS,MACxD,yBAAK5B,UAAU,kBACZQ,EAAMN,KAAKiB,YAAYpB,aAAeS,EAAMN,KAAK2B,SAEpD,6BACE,kBAAC,OAAD,CACEd,GAAIP,EAAMN,KAAKE,OAAOC,KACtBL,UAAU,qCAETQ,EAAMN,KAAKiB,YAAYpB,aAAeS,EAAMN,KAAK2B,QAC9C,YACA,S,GA1BaX,c","file":"component---src-pages-index-js-3862fe464934ad2faca6.js","sourcesContent":["import React from \"react\"\nimport { graphql, StaticQuery } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n// import Bio from \"../components/bio\"\nimport PostCard from \"../components/postCard\"\n\n// import \"../utils/global.scss\"\nimport \"../utils/normalize.css\"\nimport \"../utils/css/screen.css\"\n//TODO: switch to staticQuery, get rid of comments, remove unnecessary components, export as draft template\nconst BlogIndex = ({ data }, location) => {\n  const siteTitle = data.site.siteMetadata.title\n  const posts = data.allMarkdownRemark.edges\n  let postCounter = 0\n\n  return (\n    <Layout title={siteTitle}>\n      <SEO\n        title=\"Posts\"\n        keywords={[`devlog`, `blog`, `gatsby`, `javascript`, `react`]}\n      />\n      {/* <Bio /> */}\n      {data.site.siteMetadata.description && (\n        <header className=\"page-head\">\n          <h2 className=\"page-head-title\">\n            {data.site.siteMetadata.description}\n          </h2>\n        </header>\n      )}\n      <div className=\"post-feed\">\n        {posts.map(({ node }) => {\n          postCounter++\n          return (\n            <PostCard\n              key={node.fields.slug}\n              count={postCounter}\n              node={node}\n              postClass={`post`}\n            />\n          )\n        })}\n      </div>\n    </Layout>\n  )\n}\n\nconst indexQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM D, YYYY\")\n            title\n            description\n            tags\n            important\n            thumbnail {\n              childImageSharp {\n                fluid(maxWidth: 1360) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default props => (\n  <StaticQuery\n    query={indexQuery}\n    render={data => (\n      <BlogIndex location={props.location} props data={data} {...props} />\n    )}\n  />\n)\n","import React, { Component } from \"react\";\nimport _ from \"lodash\";\nimport { Link } from \"gatsby\";\n\nclass Tags extends Component {\n  render() {\n    const { tags } = this.props;\n    return (\n      <div className=\"post-card-tags\">\n        {tags &&\n          tags.map(tag => (\n            <span key={tag}>\n            <Link className=\"post-card-tag-link\"\n            key={tag}\n            // style={{ textDecoration: \"none\" }}\n            to={`/tags/${_.kebabCase(tag)}`}\n            >\n            #{tag}\n            </Link>\n            {\" \"}</span>\n          ))}\n      </div>\n    );\n  }\n}\n\nexport default Tags;","import React, { Component } from \"react\"\nimport { Link } from \"gatsby\"\nimport Tags from \"./tag\"\n\nexport default props => (\n  <article\n    className={`post-card ${props.node.frontmatter.important &&\n      props.node.frontmatter.important === true &&\n      `post-card-large`} ${props.postClass} no-image`}\n    style={\n      props.node.frontmatter.thumbnail && {\n        backgroundImage: `url(${props.node.frontmatter.thumbnail.childImageSharp.fluid.src})`,\n      }\n    }\n  >\n    <ContentNoImage props={props} />\n  </article>\n)\n\nclass ContentNoImage extends Component {\n  render() {\n    const { props } = this.props\n    return (\n      <div className=\"post-card-content\">\n        <div>\n          <Tags tags={props.node.frontmatter.tags} />\n        </div>\n        <div>\n          <Link to={props.node.fields.slug} className=\"post-card-link\">\n            <h2 className=\"post-card-title\">\n              {props.node.frontmatter.title || props.node.fields.slug}\n            </h2>\n          </Link>\n        </div>\n        <div className=\"post-card-date\">{props.node.frontmatter.date}</div>\n        <div className=\"post-card-body\">\n          {props.node.frontmatter.description || props.node.excerpt}\n        </div>\n        <div>\n          <Link\n            to={props.node.fields.slug}\n            className=\"post-card-link post-card-readmore\"\n          >\n            {props.node.frontmatter.description || props.node.excerpt\n              ? \"Read more\"\n              : null}\n          </Link>\n        </div>\n      </div>\n    )\n  }\n}\n"],"sourceRoot":""}